/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TspUserInterface;

import TspSourceCode.TSPGenerateAlgorithm;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author zhaoxiaohan
 */
public class DrawPanel extends javax.swing.JPanel {

    /**
     * Creates new form DrawPanel
     */
    TSPGenerateAlgorithm tspGenerateAlgorithm;
    static List<City> cityList;
    static int[] bestTour;

    static class City {

        int seq;
        Point point;

        public City(int seq, Point point) {
            this.seq = seq;
            this.point = point;
        }
    }

    public DrawPanel(TSPGenerateAlgorithm tspGenerateAlgorithm) {
        initComponents();
        cityList = new ArrayList<City>();
        for (int i = 0; i < tspGenerateAlgorithm.cityNum; i++) {
            City city = new City(i, new Point(tspGenerateAlgorithm.getxAxisList().get(i), tspGenerateAlgorithm.getyAxisList().get(i)));
            cityList.add(city);
        }
        bestTour = tspGenerateAlgorithm.getBestPhenotypeList();
    }

    @Override
    protected void paintComponent(Graphics g) {
        int maxX = 0;
        int maxY = 0;
        int minX = Integer.MAX_VALUE;
        int minY = Integer.MAX_VALUE;
        for (City c : cityList) {
            if (c.point.x > maxX) {
                maxX = c.point.x;
            }
            if (c.point.y > maxY) {
                maxY = c.point.y;
            }
            if (c.point.x < minX) {
                minX = c.point.x;
            }
            if (c.point.y < minY) {
                minY = c.point.y;
            }
        }
        for (City c : cityList) {
            c.point.setLocation(((c.point.getX()-minX)/(maxX-minX))*500+10, ((c.point.getY()-minY)/(maxY-minY))*500+10);
        }
        g.setColor(Color.blue);
        for (City c : cityList) {
            int x = (int) (c.point.getX());
            int y = (int) (c.point.getY());
            g.fillOval(x, y, 5, 5);
            g.drawString(String.valueOf(c.seq), x, y);
        }
        g.setColor(Color.red);
        for (int i = 0; i < bestTour.length-1; i++) {
            g.drawLine(cityList.get(bestTour[i]).point.x, cityList.get(bestTour[i]).point.y, cityList.get(bestTour[i+1]).point.x, cityList.get(bestTour[i+1]).point.y);
        }
        g.drawLine(cityList.get(bestTour[bestTour.length-1]).point.x, cityList.get(bestTour[bestTour.length-1]).point.y, cityList.get(bestTour[0]).point.x, cityList.get(bestTour[0]).point.y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
